// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Importing ERC20 interface from OpenZeppelin
import "@openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol";

contract SimpleDepositWithdraw {
    // The ERC20 token contract's interface
    IERC20 public token;

    // Mapping to keep track of user balances
    mapping(address => uint256) public balances;

    // Event to log deposits
    event Deposited(address indexed user, uint256 amount);

    // Event to log withdrawals
    event Withdrawn(address indexed user, uint256 amount);

    constructor(address tokenAddress) {
        // Initialize the token interface for the specified token address
        token = IERC20(tokenAddress);
    }

    // Function to deposit tokens into the contract
    function deposit(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        
        // Transfer tokens from the user to the contract
        token.transferFrom(msg.sender, address(this), amount);

        // Update the user balance
        balances[msg.sender] += amount;

        // Emit the deposit event
        emit Deposited(msg.sender, amount);
    }

    // Function to withdraw tokens from the contract
    function withdraw(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the user balance
        balances[msg.sender] -= amount;

        // Transfer tokens back to the user
        token.transfer(msg.sender, amount);

        // Emit the withdrawal event
        emit Withdrawn(msg.sender, amount);
    }
}